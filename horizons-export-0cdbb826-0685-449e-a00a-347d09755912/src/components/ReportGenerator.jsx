
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Download, BarChart3, FileText, ListChecks, Users, CalendarDays } from 'lucide-react';
import { motion } from 'framer-motion';

const ReportGenerator = ({ documents, tasks, projects, currentUser }) => {
  const [reportType, setReportType] = useState('documentSummary');
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [generatedReport, setGeneratedReport] = useState(null);

  const handleGenerateReport = () => {
    let reportData = [];
    let reportTitle = "";

    const filterByDateRange = (item) => {
      if (!dateRange.start || !dateRange.end) return true;
      const itemDate = new Date(item.date || item.createdDate || item.dueDate);
      return itemDate >= new Date(dateRange.start) && itemDate <= new Date(dateRange.end);
    };

    switch (reportType) {
      case 'documentSummary':
        reportTitle = "Document Summary Report";
        reportData = documents.filter(filterByDateRange).map(doc => ({ 
          Name: doc.name, Category: doc.category, Status: doc.status, Date: doc.date, Assigned: doc.assignedTo 
        }));
        break;
      case 'taskProgress':
        reportTitle = "Task Progress Report";
        reportData = tasks.filter(filterByDateRange).map(task => {
          const project = projects.find(p => p.id === task.projectId);
          return { Task: task.name, Project: project?.name || 'N/A', Status: task.status, DueDate: task.dueDate, Assigned: task.assignedTo };
        });
        break;
      case 'projectOverview':
        reportTitle = "Project Overview Report";
        reportData = projects.filter(filterByDateRange).map(proj => ({
          Project: proj.name, Description: proj.description, Status: proj.status, Tasks: tasks.filter(t => t.projectId === proj.id).length, Assigned: proj.assignedTo
        }));
        break;
      default:
        reportData = [];
    }
    setGeneratedReport({ title: reportTitle, data: reportData, generatedBy: currentUser.name, generationDate: new Date().toLocaleString() });
  };

  const downloadReport = () => {
    if (!generatedReport || generatedReport.data.length === 0) return;
    
    const headers = Object.keys(generatedReport.data[0]).join(',');
    const csvData = generatedReport.data.map(row => Object.values(row).join(',')).join('\\n');
    const csvContent = `Report Title: ${generatedReport.title}\\nGenerated By: ${generatedReport.generatedBy}\\nGeneration Date: ${generatedReport.generationDate}\\n\\n${headers}\\n${csvData}`;
    
    const blob = new Blob([csvContent.replace(/\\n/g, '\\r\\n')], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute("download", `${generatedReport.title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  const reportTypes = [
    { id: 'documentSummary', label: 'Document Summary', icon: <FileText className="mr-2 h-5 w-5" /> },
    { id: 'taskProgress', label: 'Task Progress', icon: <ListChecks className="mr-2 h-5 w-5" /> },
    { id: 'projectOverview', label: 'Project Overview', icon: <Users className="mr-2 h-5 w-5" /> },
  ];

  return (
    <motion.div 
      className="space-y-8 p-1"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex items-center justify-between pb-4 border-b border-gray-200 dark:border-slate-700">
        <h1 className="text-3xl font-bold text-gray-800 dark:text-slate-100 flex items-center">
          <BarChart3 className="mr-3 h-8 w-8 text-blue-600 dark:text-sky-500" />
          Generate Reports
        </h1>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6 bg-white dark:bg-slate-800 rounded-xl shadow-xl border border-gray-100 dark:border-slate-700">
        <div>
          <label htmlFor="reportType" className="block text-sm font-medium text-gray-700 dark:text-slate-300 mb-1">Report Type</label>
          <select 
            id="reportType" 
            value={reportType} 
            onChange={(e) => setReportType(e.target.value)}
            className="w-full px-4 py-2.5 border border-gray-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-sky-500 bg-white dark:bg-slate-700 text-gray-900 dark:text-slate-100 appearance-none"
          >
            {reportTypes.map(rt => <option key={rt.id} value={rt.id}>{rt.label}</option>)}
          </select>
        </div>
        <div>
          <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 dark:text-slate-300 mb-1">Start Date</label>
          <input 
            type="date" 
            id="startDate" 
            value={dateRange.start} 
            onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
            className="w-full px-4 py-2.5 border border-gray-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-sky-500 bg-white dark:bg-slate-700 text-gray-900 dark:text-slate-100"
          />
        </div>
        <div>
          <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 dark:text-slate-300 mb-1">End Date</label>
          <input 
            type="date" 
            id="endDate" 
            value={dateRange.end} 
            onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
            className="w-full px-4 py-2.5 border border-gray-300 dark:border-slate-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-sky-500 bg-white dark:bg-slate-700 text-gray-900 dark:text-slate-100"
          />
        </div>
        <div className="md:col-span-3 flex justify-end mt-2">
          <Button 
            onClick={handleGenerateReport} 
            className="bg-gradient-to-r from-blue-600 to-sky-500 hover:from-blue-700 hover:to-sky-600 text-white shadow-md transition-all transform hover:scale-105"
          >
            <BarChart3 className="mr-2 h-5 w-5" />
            Generate Report
          </Button>
        </div>
      </div>

      {generatedReport && (
        <motion.div 
          className="mt-8 p-6 bg-white dark:bg-slate-800 rounded-xl shadow-xl border border-gray-100 dark:border-slate-700"
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.3 }}
        >
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-800 dark:text-slate-100">{generatedReport.title}</h2>
            <Button onClick={downloadReport} variant="outline" className="dark:text-slate-300 dark:border-slate-600 dark:hover:bg-slate-700">
              <Download className="mr-2 h-4 w-4" />
              Download CSV
            </Button>
          </div>
          <p className="text-xs text-gray-500 dark:text-slate-400 mb-1">Generated by: {generatedReport.generatedBy}</p>
          <p className="text-xs text-gray-500 dark:text-slate-400 mb-4">Generated on: {generatedReport.generationDate}</p>
          
          {generatedReport.data.length > 0 ? (
            <div className="overflow-x-auto rounded-lg border border-gray-200 dark:border-slate-700">
              <table className="min-w-full divide-y divide-gray-200 dark:divide-slate-700">
                <thead className="bg-gray-50 dark:bg-slate-700/50">
                  <tr>
                    {Object.keys(generatedReport.data[0]).map(header => (
                      <th key={header} scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-slate-400 uppercase tracking-wider">{header}</th>
                    ))}
                  </tr>
                </thead>
                <tbody className="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-slate-700">
                  {generatedReport.data.map((row, index) => (
                    <tr key={index} className="hover:bg-gray-50 dark:hover:bg-slate-700/50 transition-colors">
                      {Object.values(row).map((value, i) => (
                        <td key={i} className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-slate-300">{String(value)}</td>
                      ))}
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="text-center text-gray-500 dark:text-slate-400 py-6">No data available for this report with the selected criteria.</p>
          )}
        </motion.div>
      )}
    </motion.div>
  );
};

export default ReportGenerator;
